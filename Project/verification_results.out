[[35m Debug  [0m] Generating VCs for functions: _$t2$0, _$t1$0, _$success$0, inv$7, inv$8, lookup$1, insert$1, delete$1, split$2, join$1, isEmpty$4, size$2, toSet$3, lookupAVL$0, BSTSpreadRight$0, BSTSpreadLeft$0, balanceLeft$0, balanceRight$0, insertAVL$0, delete_max$0, delete_root$0, deleteAVL$0, joinRightAVL$0, joinLeftAVL$0, joinAVL$0, splitAVL$0, lookup$2, lookup$0, insert$0, insert$2, delete$0, delete$2, split$3, split$1, join$2, join$0, isEmpty$6, isEmpty$3, size$1, size$4, toSet$2, toSet$5, EmptyRequireForDefault$0, size$3, isEmpty$5, height$0, toSet$4, toList$5, checkGreatest$0, checkSmallest$0, isBalanced$0, isBST$0, isAVL$0
[[35m Debug  [0m] Finished generating VCs
[[34m  Info  [0m] Starting verification...
[[34m  Info  [0m] Verified: 0 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call size(({   assert(thiss.isInstanceOf[A...)' VC for size @72:9...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call size(({   assert(thiss.isInstanceOf[A...)' VC for size @72:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 1 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call size(({   assert(thiss.isInstanceOf[A...)' VC for size @?:?...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call size(({   assert(thiss.isInstanceOf[A...)' VC for size @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 2 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call split(({   assert(thiss.isInstanceOf[...)' VC for split @48:9...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call split(({   assert(thiss.isInstanceOf[...)' VC for split @48:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 3 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call split(({   assert(thiss.isInstanceOf[...)' VC for split @?:?...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call split(({   assert(thiss.isInstanceOf[...)' VC for split @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 4 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call delete(({   assert(thiss.isInstanceOf...)' VC for delete @38:9...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call delete(({   assert(thiss.isInstanceOf...)' VC for delete @38:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 5 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call delete(({   assert(thiss.isInstanceOf...)' VC for delete @?:?...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call delete(({   assert(thiss.isInstanceOf...)' VC for delete @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 6 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call deleteAVL({   assert(thiss.isInstance...)' VC for delete @14:50...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || isAVL(thiss.tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call deleteAVL({   assert(thiss.isInstance...)' VC for delete @14:50:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 7 / 252
[[35m Debug  [0m]  - Now solving 'cast correctness' VC for delete @14:60...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'cast correctness' VC for delete @14:60:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 8 / 252
[[35m Debug  [0m]  - Now solving 'cast correctness' VC for size @26:33...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'cast correctness' VC for size @26:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 9 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call join(({   assert(thiss.isInstanceOf[A...)' VC for join @58:9...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call join(({   assert(thiss.isInstanceOf[A...)' VC for join @58:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 10 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call join(({   assert(thiss.isInstanceOf[A...)' VC for join @?:?...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call join(({   assert(thiss.isInstanceOf[A...)' VC for join @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 11 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call insert(({   assert(thiss.isInstanceOf...)' VC for insert @30:9...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call insert(({   assert(thiss.isInstanceOf...)' VC for insert @30:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 12 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call insert(({   assert(thiss.isInstanceOf...)' VC for insert @?:?...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call insert(({   assert(thiss.isInstanceOf...)' VC for insert @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 13 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call lookup(({   assert(thiss.isInstanceOf...)' VC for lookup @22:9...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call lookup(({   assert(thiss.isInstanceOf...)' VC for lookup @22:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 14 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call lookup(({   assert(thiss.isInstanceOf...)' VC for lookup @?:?...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call lookup(({   assert(thiss.isInstanceOf...)' VC for lookup @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 15 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call inv(({   assert(thiss.isInstanceOf[AV...)' VC for inv @10:13...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call inv(({   assert(thiss.isInstanceOf[AV...)' VC for inv @10:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 16 / 252
[[35m Debug  [0m]  - Now solving 'cast correctness' VC for inv @10:13...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'cast correctness' VC for inv @10:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 17 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call insertAVL({   assert(thiss.isInstance...)' VC for insert @13:50...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || isAVL(thiss.tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call insertAVL({   assert(thiss.isInstance...)' VC for insert @13:50:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 18 / 252
[[35m Debug  [0m]  - Now solving 'cast correctness' VC for insert @13:60...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'cast correctness' VC for insert @13:60:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 19 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call delete_root(tree))' VC for deleteAVL @170:21...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || key != tree.key || size(tree) > BigInt("0") && isAVL(tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call delete_root(tree))' VC for deleteAVL @170:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 20 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call deleteAVL((scrut.left): @DropVCs , key))' VC for deleteAVL @172:34...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || key == tree.key || key >= tree.key || isAVL(tree.left)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call deleteAVL((scrut.left): @DropVCs , key))' VC for deleteAVL @172:34:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 21 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call balanceRight((scrut.key): @DropVCs , ...)' VC for deleteAVL @173:21...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || key == tree.key || key >= tree.key || {
[[35m Debug  [0m]   val l_prim: Tree = deleteAVL(tree.left, key)
[[35m Debug  [0m]   checkGreatest(l_prim, tree.key) && checkSmallest(tree.right, tree.key) && isAVL(l_prim) && isAVL(tree.right) && (abs(height(l_prim) - height(tree.right)) <= BigInt("1") || height(tree.right) == height(l_prim) + BigInt("2"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call balanceRight((scrut.key): @DropVCs , ...)' VC for deleteAVL @173:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 22 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call deleteAVL((scrut.right): @DropVCs , key))' VC for deleteAVL @175:34...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || key == tree.key || key < tree.key || isAVL(tree.right)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call deleteAVL((scrut.right): @DropVCs , key))' VC for deleteAVL @175:34:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 23 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call balanceLeft((scrut.key): @DropVCs , (...)' VC for deleteAVL @176:21...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || key == tree.key || key < tree.key || {
[[35m Debug  [0m]   val r_prim: Tree = deleteAVL(tree.right, key)
[[35m Debug  [0m]   checkGreatest(tree.left, tree.key) && checkSmallest(r_prim, tree.key) && isAVL(tree.left) && isAVL(r_prim) && (abs(height(tree.left) - height(r_prim)) <= BigInt("1") || height(tree.left) == height(r_prim) + BigInt("2"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call balanceLeft((scrut.key): @DropVCs , (...)' VC for deleteAVL @176:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 24 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for deleteAVL @164:9...
[[35m Debug  [0m] !isAVL(tree) || TreePrimitiveSize(tree) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for deleteAVL @164:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 25 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for deleteAVL @167:29...
[[35m Debug  [0m] !isAVL(tree) || !tree.isInstanceOf[Empty] || {
[[35m Debug  [0m]   val res: Tree = Empty()
[[35m Debug  [0m]   isAVL(res) && (toSet(tree).contains(key) || size(res) == size(tree)) && (!toSet(res).contains(key) || size(res) + BigInt("1") == size(tree)) && toSet(res).subsetOf(toSet(tree)) && (height(tree) == height(res) || height(tree) == height(res) + BigInt("1")) && !toSet(res).contains(key)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for deleteAVL @167:29:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 26 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for deleteAVL @170:21...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || key != tree.key || {
[[35m Debug  [0m]   val res: Tree = delete_root(tree)
[[35m Debug  [0m]   isAVL(res) && (toSet(tree).contains(key) || size(res) == size(tree)) && (!toSet(res).contains(key) || size(res) + BigInt("1") == size(tree)) && toSet(res).subsetOf(toSet(tree)) && (height(tree) == height(res) || height(tree) == height(res) + BigInt("1")) && !toSet(res).contains(key)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for deleteAVL @170:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 27 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for deleteAVL @172:34...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || key == tree.key || key >= tree.key || TreePrimitiveSize(tree.left) < TreePrimitiveSize(tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for deleteAVL @172:34:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 28 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for deleteAVL @173:21...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || key == tree.key || key >= tree.key || {
[[35m Debug  [0m]   val res: Tree = balanceRight(tree.key, deleteAVL(tree.left, key), tree.right)
[[35m Debug  [0m]   isAVL(res) && (toSet(tree).contains(key) || size(res) == size(tree)) && (!toSet(res).contains(key) || size(res) + BigInt("1") == size(tree)) && toSet(res).subsetOf(toSet(tree)) && (height(tree) == height(res) || height(tree) == height(res) + BigInt("1")) && !toSet(res).contains(key)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for deleteAVL @173:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 29 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for deleteAVL @175:34...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || key == tree.key || key < tree.key || TreePrimitiveSize(tree.right) < TreePrimitiveSize(tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for deleteAVL @175:34:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 30 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for deleteAVL @176:21...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || key == tree.key || key < tree.key || {
[[35m Debug  [0m]   val res: Tree = balanceLeft(tree.key, tree.left, deleteAVL(tree.right, key))
[[35m Debug  [0m]   isAVL(res) && (toSet(tree).contains(key) || size(res) == size(tree)) && (!toSet(res).contains(key) || size(res) + BigInt("1") == size(tree)) && toSet(res).subsetOf(toSet(tree)) && (height(tree) == height(res) || height(tree) == height(res) + BigInt("1")) && !toSet(res).contains(key)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for deleteAVL @176:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 31 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for deleteAVL @166:9...
[[35m Debug  [0m] !isAVL(tree) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for deleteAVL @166:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 32 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for deleteAVL @166:9...
[[35m Debug  [0m] !isAVL(tree) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for deleteAVL @166:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 33 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call delete_max((scrut.left): @DropVCs ))' VC for delete_root @158:40...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || tree.isInstanceOf[Node] && size(tree.left) == BigInt("0") || !tree.isInstanceOf[Node] || size(tree.left) > BigInt("0") && isAVL(tree.left)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call delete_max((scrut.left): @DropVCs ))' VC for delete_root @158:40:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 34 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call balanceRight(n_prim, l_prim, (scrut.r...)' VC for delete_root @159:17...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || tree.isInstanceOf[Node] && size(tree.left) == BigInt("0") || !tree.isInstanceOf[Node] || {
[[35m Debug  [0m]   val $2$: (BigInt, Tree) = delete_max(tree.left)
[[35m Debug  [0m]   val l_prim: Tree = $2$._2
[[35m Debug  [0m]   checkGreatest(l_prim, $2$._1) && checkSmallest(tree.right, $2$._1) && isAVL(l_prim) && isAVL(tree.right) && (abs(height(l_prim) - height(tree.right)) <= BigInt("1") || height(tree.right) == height(l_prim) + BigInt("2"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call balanceRight(n_prim, l_prim, (scrut.r...)' VC for delete_root @159:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 35 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for delete_root @155:50...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || !tree.isInstanceOf[Node] || size(tree.right) != BigInt("0") || isAVL(tree.left) && size(tree.left) + BigInt("1") == size(tree) && toSet(tree.left).subsetOf(toSet(tree)) && (height(tree) == height(tree.left) || height(tree) == height(tree.left) + BigInt("1"))
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for delete_root @155:50:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 36 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for delete_root @156:50...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || !tree.isInstanceOf[Node] || size(tree.left) != BigInt("0") || isAVL(tree.right) && size(tree.right) + BigInt("1") == size(tree) && toSet(tree.right).subsetOf(toSet(tree)) && (height(tree) == height(tree.right) || height(tree) == height(tree.right) + BigInt("1"))
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for delete_root @156:50:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 37 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for delete_root @159:17...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || tree.isInstanceOf[Node] && size(tree.left) == BigInt("0") || !tree.isInstanceOf[Node] || {
[[35m Debug  [0m]   val $2$: (BigInt, Tree) = delete_max(tree.left)
[[35m Debug  [0m]   val res: Tree = balanceRight($2$._1, $2$._2, tree.right)
[[35m Debug  [0m]   isAVL(res) && size(res) + BigInt("1") == size(tree) && toSet(res).subsetOf(toSet(tree)) && (height(tree) == height(res) || height(tree) == height(res) + BigInt("1"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for delete_root @159:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 38 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for delete_root @154:9...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || tree.isInstanceOf[Node] && size(tree.left) == BigInt("0") || tree.isInstanceOf[Node]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for delete_root @154:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 39 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for delete_root @154:9...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || tree.isInstanceOf[Node] && size(tree.left) == BigInt("0") || tree.isInstanceOf[Node] || {
[[35m Debug  [0m]   val res: Tree = stainless.lang.error[Tree]("match exhaustiveness")
[[35m Debug  [0m]   isAVL(res) && size(res) + BigInt("1") == size(tree) && toSet(res).subsetOf(toSet(tree)) && (height(tree) == height(res) || height(tree) == height(res) + BigInt("1"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for delete_root @154:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 40 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call joinAVL(tl, k, tr))' VC for join @19:13...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || isAVL(tl) && isAVL(tr) && checkGreatest(tl, k) && checkSmallest(tr, k)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call joinAVL(tl, k, tr))' VC for join @19:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 41 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call lookupAVL({   assert(thiss.isInstance...)' VC for lookup @12:53...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || isAVL(thiss.tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call lookupAVL({   assert(thiss.isInstance...)' VC for lookup @12:53:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 42 / 252
[[35m Debug  [0m]  - Now solving 'cast correctness' VC for lookup @12:63...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'cast correctness' VC for lookup @12:63:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 43 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call lookupAVL((scrut.left): @DropVCs , se...)' VC for lookupAVL @20:17...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || searched == tree.key || searched >= tree.key || isAVL(tree.left)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call lookupAVL((scrut.left): @DropVCs , se...)' VC for lookupAVL @20:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 44 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call lookupAVL((scrut.right): @DropVCs , s...)' VC for lookupAVL @22:17...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || searched == tree.key || searched < tree.key || isAVL(tree.right)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call lookupAVL((scrut.right): @DropVCs , s...)' VC for lookupAVL @22:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 45 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for lookupAVL @12:9...
[[35m Debug  [0m] !isAVL(tree) || TreePrimitiveSize(tree) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for lookupAVL @12:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 46 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for lookupAVL @15:29...
[[35m Debug  [0m] !isAVL(tree) || !tree.isInstanceOf[Empty] || false == contains[BigInt](toList(tree), searched)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for lookupAVL @15:29:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 47 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for lookupAVL @18:17...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || searched != tree.key || true == contains[BigInt](toList(tree), searched)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for lookupAVL @18:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 48 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for lookupAVL @20:17...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || searched == tree.key || searched >= tree.key || TreePrimitiveSize(tree.left) < TreePrimitiveSize(tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for lookupAVL @20:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 49 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for lookupAVL @20:17...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || searched == tree.key || searched >= tree.key || lookupAVL(tree.left, searched) == contains[BigInt](toList(tree), searched)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for lookupAVL @20:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 50 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for lookupAVL @22:17...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || searched == tree.key || searched < tree.key || TreePrimitiveSize(tree.right) < TreePrimitiveSize(tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for lookupAVL @22:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 51 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for lookupAVL @22:17...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || searched == tree.key || searched < tree.key || lookupAVL(tree.right, searched) == contains[BigInt](toList(tree), searched)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for lookupAVL @22:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 52 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for lookupAVL @14:9...
[[35m Debug  [0m] !isAVL(tree) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for lookupAVL @14:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 53 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for lookupAVL @14:9...
[[35m Debug  [0m] !isAVL(tree) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for lookupAVL @14:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 54 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call insertAVL((scrut.left): @DropVCs , ne...)' VC for insertAVL @121:30...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key == tree.key || new_key >= tree.key || isAVL(tree.left)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call insertAVL((scrut.left): @DropVCs , ne...)' VC for insertAVL @121:30:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 55 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call balanceLeft((scrut.key): @DropVCs , l...)' VC for insertAVL @125:25...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key == tree.key || new_key >= tree.key || {
[[35m Debug  [0m]   val ll: Tree = insertAVL(tree.left, new_key)
[[35m Debug  [0m]   height(ll) <= height(tree.right) + BigInt("2") || checkGreatest(ll, tree.key) && checkSmallest(tree.right, tree.key) && isAVL(ll) && isAVL(tree.right) && (abs(height(ll) - height(tree.right)) <= BigInt("1") || height(ll) == height(tree.right) + BigInt("2"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call balanceLeft((scrut.key): @DropVCs , l...)' VC for insertAVL @125:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 56 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call insertAVL((scrut.right): @DropVCs , n...)' VC for insertAVL @128:30...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key == tree.key || new_key < tree.key || isAVL(tree.right)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call insertAVL((scrut.right): @DropVCs , n...)' VC for insertAVL @128:30:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 57 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call balanceRight((scrut.key): @DropVCs , ...)' VC for insertAVL @132:25...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key == tree.key || new_key < tree.key || {
[[35m Debug  [0m]   val rr: Tree = insertAVL(tree.right, new_key)
[[35m Debug  [0m]   height(rr) <= height(tree.left) + BigInt("2") || checkGreatest(tree.left, tree.key) && checkSmallest(rr, tree.key) && isAVL(tree.left) && isAVL(rr) && (abs(height(tree.left) - height(rr)) <= BigInt("1") || height(rr) == height(tree.left) + BigInt("2"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call balanceRight((scrut.key): @DropVCs , ...)' VC for insertAVL @132:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 58 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for insertAVL @113:9...
[[35m Debug  [0m] !isAVL(tree) || TreePrimitiveSize(tree) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for insertAVL @113:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 59 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for insertAVL @116:29...
[[35m Debug  [0m] !isAVL(tree) || !tree.isInstanceOf[Empty] || {
[[35m Debug  [0m]   val res: Tree = Node(new_key, Empty(), Empty())
[[35m Debug  [0m]   isAVL(res) && (size(res) == size(tree) + BigInt("1") || size(res) == size(tree)) && abs(height(res) - height(tree)) <= BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for insertAVL @116:29:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 60 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for insertAVL @137:127...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key != tree.key || isAVL(tree) && (size(tree) == size(tree) + BigInt("1") || size(tree) == size(tree)) && abs(height(tree) - height(tree)) <= BigInt("1")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for insertAVL @137:127:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 61 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for insertAVL @121:30...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key == tree.key || new_key >= tree.key || TreePrimitiveSize(tree.left) < TreePrimitiveSize(tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for insertAVL @121:30:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 62 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for insertAVL @137:127...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key == tree.key || new_key >= tree.key || height(insertAVL(tree.left, new_key)) > height(tree.right) + BigInt("2") || isAVL(tree) && (size(tree) == size(tree) + BigInt("1") || size(tree) == size(tree)) && abs(height(tree) - height(tree)) <= BigInt("1")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for insertAVL @137:127:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 63 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for insertAVL @125:25...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key == tree.key || new_key >= tree.key || {
[[35m Debug  [0m]   val ll: Tree = insertAVL(tree.left, new_key)
[[35m Debug  [0m]   height(ll) <= height(tree.right) + BigInt("2") || {
[[35m Debug  [0m]     val res: Tree = balanceLeft(tree.key, ll, tree.right)
[[35m Debug  [0m]     isAVL(res) && (size(res) == size(tree) + BigInt("1") || size(res) == size(tree)) && abs(height(res) - height(tree)) <= BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for insertAVL @125:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 64 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for insertAVL @128:30...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key == tree.key || new_key < tree.key || TreePrimitiveSize(tree.right) < TreePrimitiveSize(tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for insertAVL @128:30:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 65 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for insertAVL @137:127...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key == tree.key || new_key < tree.key || height(insertAVL(tree.right, new_key)) > height(tree.left) + BigInt("2") || isAVL(tree) && (size(tree) == size(tree) + BigInt("1") || size(tree) == size(tree)) && abs(height(tree) - height(tree)) <= BigInt("1")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for insertAVL @137:127:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 66 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for insertAVL @132:25...
[[35m Debug  [0m] !isAVL(tree) || tree.isInstanceOf[Empty] || new_key == tree.key || new_key < tree.key || {
[[35m Debug  [0m]   val rr: Tree = insertAVL(tree.right, new_key)
[[35m Debug  [0m]   height(rr) <= height(tree.left) + BigInt("2") || {
[[35m Debug  [0m]     val res: Tree = balanceRight(tree.key, tree.left, rr)
[[35m Debug  [0m]     isAVL(res) && (size(res) == size(tree) + BigInt("1") || size(res) == size(tree)) && abs(height(res) - height(tree)) <= BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for insertAVL @132:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 67 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for insertAVL @115:9...
[[35m Debug  [0m] !isAVL(tree) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for insertAVL @115:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 68 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for insertAVL @115:9...
[[35m Debug  [0m] !isAVL(tree) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for insertAVL @115:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 69 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call delete_max((scrut.right): @DropVCs ))' VC for delete_max @146:40...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || !tree.isInstanceOf[Node] || size(tree.right) > BigInt("0") && isAVL(tree.right)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call delete_max((scrut.right): @DropVCs ))' VC for delete_max @146:40:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 70 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call balanceLeft((scrut.key): @DropVCs , (...)' VC for delete_max @147:26...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || !tree.isInstanceOf[Node] || {
[[35m Debug  [0m]   val r_prim: Tree = delete_max(tree.right)._2
[[35m Debug  [0m]   checkGreatest(tree.left, tree.key) && checkSmallest(r_prim, tree.key) && isAVL(tree.left) && isAVL(r_prim) && (abs(height(tree.left) - height(r_prim)) <= BigInt("1") || height(tree.left) == height(r_prim) + BigInt("2"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call balanceLeft((scrut.key): @DropVCs , (...)' VC for delete_max @147:26:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 71 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for delete_max @139:9...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || TreePrimitiveSize(tree) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for delete_max @139:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 72 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for delete_max @143:17...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || !tree.isInstanceOf[Node] || size(tree.right) != BigInt("0") || isAVL(tree.left) && size(tree.left) + BigInt("1") == size(tree) && (height(tree.left) == height(tree) || height(tree.left) == height(tree) - BigInt("1")) && checkGreatest(tree.left, tree.key) && toSet(tree).contains(tree.key) && toSet(tree.left).subsetOf(toSet(tree))
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for delete_max @143:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 73 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for delete_max @146:40...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || !tree.isInstanceOf[Node] || TreePrimitiveSize(tree.right) < TreePrimitiveSize(tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for delete_max @146:40:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 74 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for delete_max @147:17...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || !tree.isInstanceOf[Node] || {
[[35m Debug  [0m]   val $1$: (BigInt, Tree) = delete_max(tree.right)
[[35m Debug  [0m]   val r_prim: Tree = $1$._2
[[35m Debug  [0m]   val res: (BigInt, Tree) = ($1$._1, balanceLeft(tree.key, tree.left, r_prim))
[[35m Debug  [0m]   isAVL({
[[35m Debug  [0m]     val e: BigInt = $1$._1
[[35m Debug  [0m]     balanceLeft(tree.key, tree.left, r_prim)
[[35m Debug  [0m]   }) && size({
[[35m Debug  [0m]     val e: BigInt = $1$._1
[[35m Debug  [0m]     balanceLeft(tree.key, tree.left, r_prim)
[[35m Debug  [0m]   }) + BigInt("1") == size(tree) && (height({
[[35m Debug  [0m]     val e: BigInt = $1$._1
[[35m Debug  [0m]     balanceLeft(tree.key, tree.left, r_prim)
[[35m Debug  [0m]   }) == height(tree) || height({
[[35m Debug  [0m]     val e: BigInt = $1$._1
[[35m Debug  [0m]     balanceLeft(tree.key, tree.left, r_prim)
[[35m Debug  [0m]   }) == height(tree) - BigInt("1")) && checkGreatest({
[[35m Debug  [0m]     val e: BigInt = $1$._1
[[35m Debug  [0m]     balanceLeft(tree.key, tree.left, r_prim)
[[35m Debug  [0m]   }, {
[[35m Debug  [0m]     val e: Tree = balanceLeft(tree.key, tree.left, r_prim)
[[35m Debug  [0m]     $1$._1
[[35m Debug  [0m]   }) && toSet(tree).contains({
[[35m Debug  [0m]     val e: Tree = balanceLeft(tree.key, tree.left, r_prim)
[[35m Debug  [0m]     $1$._1
[[35m Debug  [0m]   }) && toSet({
[[35m Debug  [0m]     val e: BigInt = $1$._1
[[35m Debug  [0m]     balanceLeft(tree.key, tree.left, r_prim)
[[35m Debug  [0m]   }).subsetOf(toSet(tree))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for delete_max @147:17:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 75 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for delete_max @141:9...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || tree.isInstanceOf[Node]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for delete_max @141:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 76 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for delete_max @141:9...
[[35m Debug  [0m] size(tree) <= BigInt("0") || !isAVL(tree) || tree.isInstanceOf[Node] && size(tree.right) == BigInt("0") || tree.isInstanceOf[Node] || {
[[35m Debug  [0m]   val res: (BigInt, Tree) = stainless.lang.error[(BigInt, Tree)]("match exhaustiveness")
[[35m Debug  [0m]   isAVL(res._2) && size(res._2) + BigInt("1") == size(tree) && (height(res._2) == height(tree) || height(res._2) == height(tree) - BigInt("1")) && checkGreatest(res._2, res._1) && toSet(tree).contains(res._1) && toSet(res._2).subsetOf(toSet(tree))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for delete_max @141:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 77 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call splitAVL({   assert(thiss.isInstanceO...)' VC for split @16:66...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || isAVL(thiss.tree)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call splitAVL({   assert(thiss.isInstanceO...)' VC for split @16:66:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 78 / 252
[[35m Debug  [0m]  - Now solving 'cast correctness' VC for split @16:75...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'cast correctness' VC for split @16:75:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 79 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call splitAVL((scrut.left): @DropVCs , k))' VC for splitAVL @233:45...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || isAVL(t.left)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call splitAVL((scrut.left): @DropVCs , k))' VC for splitAVL @233:45:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 80 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call joinAVL(rprim, (scrut.key): @DropVCs ...)' VC for splitAVL @234:32...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || {
[[35m Debug  [0m]   val tl: Tree = splitAVL(t.left, k)._3
[[35m Debug  [0m]   isAVL(tl) && isAVL(t.right) && checkGreatest(tl, t.key) && checkSmallest(t.right, t.key)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call joinAVL(rprim, (scrut.key): @DropVCs ...)' VC for splitAVL @234:32:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 81 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call splitAVL((scrut.right): @DropVCs , k))' VC for splitAVL @236:45...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || isAVL(t.right)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call splitAVL((scrut.right): @DropVCs , k))' VC for splitAVL @236:45:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 82 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call joinAVL((scrut.left): @DropVCs , (scr...)' VC for splitAVL @237:22...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || {
[[35m Debug  [0m]   val tr: Tree = splitAVL(t.right, k)._1
[[35m Debug  [0m]   isAVL(t.left) && isAVL(tr) && checkGreatest(t.left, t.key) && checkSmallest(tr, t.key)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call joinAVL((scrut.left): @DropVCs , (scr...)' VC for splitAVL @237:22:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 83 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for _$t2 @?:?...
[[35m Debug  [0m] !(isAVL(t)): @dropConjunct  @DropVCs  || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } >= BigInt("0") && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for _$t2 @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 84 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for _$t1 @?:?...
[[35m Debug  [0m] !(isAVL(t)): @dropConjunct  @DropVCs  || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } >= BigInt("0") && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for _$t1 @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 85 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for _$success @?:?...
[[35m Debug  [0m] !(isAVL(t)): @dropConjunct  @DropVCs  || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } >= BigInt("0") && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for _$success @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 86 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for splitAVL @225:9...
[[35m Debug  [0m] !isAVL(t) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } >= BigInt("0") && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] } >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for splitAVL @225:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 87 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:38...
[[35m Debug  [0m] !isAVL(t) || !t.isInstanceOf[Empty] || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:38:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 88 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:50...
[[35m Debug  [0m] !isAVL(t) || !t.isInstanceOf[Empty] || !isAVL(_$t1(k, t)) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:50:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 89 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:62...
[[35m Debug  [0m] !isAVL(t) || !t.isInstanceOf[Empty] || !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:62:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 90 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:85...
[[35m Debug  [0m] !isAVL(t) || !t.isInstanceOf[Empty] || !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:85:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 91 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:108...
[[35m Debug  [0m] !isAVL(t) || !t.isInstanceOf[Empty] || !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:108:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 92 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:138...
[[35m Debug  [0m] !isAVL(t) || !t.isInstanceOf[Empty] || !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || !toSet(_$t1(k, t)).subsetOf(toSet(t)) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:138:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 93 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:170...
[[35m Debug  [0m] !isAVL(t) || !t.isInstanceOf[Empty] || !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || !toSet(_$t1(k, t)).subsetOf(toSet(t)) || !toSet(_$t2(k, t)).subsetOf(toSet(t)) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:170:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 94 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for splitAVL @228:29...
[[35m Debug  [0m] !isAVL(t) || !t.isInstanceOf[Empty] || isAVL(_$t1(k, t)) && isAVL(_$t2(k, t)) && checkGreatest(_$t1(k, t), k) && checkSmallest(_$t2(k, t), k) && toSet(_$t1(k, t)).subsetOf(toSet(t)) && toSet(_$t2(k, t)).subsetOf(toSet(t)) && (!_$success(k, t) || toSet(t).contains(k))
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for splitAVL @228:29:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 95 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:38...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key != k || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:38:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 96 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:50...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key != k || !isAVL(_$t1(k, t)) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:50:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 97 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:62...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key != k || !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:62:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 98 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:85...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key != k || !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:85:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 99 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:108...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key != k || !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:108:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 100 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:138...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key != k || !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || !toSet(_$t1(k, t)).subsetOf(toSet(t)) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:138:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 101 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:170...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key != k || !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || !toSet(_$t1(k, t)).subsetOf(toSet(t)) || !toSet(_$t2(k, t)).subsetOf(toSet(t)) || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("0")
[[35m Debug  [0m]   (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   BigInt("0")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:170:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 102 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for splitAVL @231:21...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key != k || isAVL(_$t1(k, t)) && isAVL(_$t2(k, t)) && checkGreatest(_$t1(k, t), k) && checkSmallest(_$t2(k, t), k) && toSet(_$t1(k, t)).subsetOf(toSet(t)) && toSet(_$t2(k, t)).subsetOf(toSet(t)) && (!_$success(k, t) || toSet(t).contains(k))
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for splitAVL @231:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 103 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @233:45...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t.left)) + BigIntAbs(k)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t.left)) + BigIntAbs(k)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t.left)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @233:45:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 104 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:38...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || {
[[35m Debug  [0m]   val $3$: (Tree, Boolean, Tree) = splitAVL(t.left, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = ($3$._1, $3$._2, joinAVL($3$._3, t.key, t.right))
[[35m Debug  [0m]   {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:38:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 105 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:50...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || {
[[35m Debug  [0m]   val $3$: (Tree, Boolean, Tree) = splitAVL(t.left, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = ($3$._1, $3$._2, joinAVL($3$._3, t.key, t.right))
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:50:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 106 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:62...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || {
[[35m Debug  [0m]   val $3$: (Tree, Boolean, Tree) = splitAVL(t.left, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = ($3$._1, $3$._2, joinAVL($3$._3, t.key, t.right))
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:62:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 107 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:85...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || {
[[35m Debug  [0m]   val $3$: (Tree, Boolean, Tree) = splitAVL(t.left, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = ($3$._1, $3$._2, joinAVL($3$._3, t.key, t.right))
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:85:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 108 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:108...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || {
[[35m Debug  [0m]   val $3$: (Tree, Boolean, Tree) = splitAVL(t.left, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = ($3$._1, $3$._2, joinAVL($3$._3, t.key, t.right))
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:108:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 109 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:138...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || {
[[35m Debug  [0m]   val $3$: (Tree, Boolean, Tree) = splitAVL(t.left, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = ($3$._1, $3$._2, joinAVL($3$._3, t.key, t.right))
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || !toSet(_$t1(k, t)).subsetOf(toSet(t)) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:138:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 110 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:170...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || {
[[35m Debug  [0m]   val $3$: (Tree, Boolean, Tree) = splitAVL(t.left, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = ($3$._1, $3$._2, joinAVL($3$._3, t.key, t.right))
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || !toSet(_$t1(k, t)).subsetOf(toSet(t)) || !toSet(_$t2(k, t)).subsetOf(toSet(t)) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:170:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 111 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for splitAVL @234:21...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k >= t.key || {
[[35m Debug  [0m]   val $3$: (Tree, Boolean, Tree) = splitAVL(t.left, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = ($3$._1, $3$._2, joinAVL($3$._3, t.key, t.right))
[[35m Debug  [0m]   isAVL(_$t1(k, t)) && isAVL(_$t2(k, t)) && checkGreatest(_$t1(k, t), k) && checkSmallest(_$t2(k, t), k) && toSet(_$t1(k, t)).subsetOf(toSet(t)) && toSet(_$t2(k, t)).subsetOf(toSet(t)) && (!_$success(k, t) || toSet(t).contains(k))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for splitAVL @234:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 112 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @236:45...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t.right)) + BigIntAbs(k)
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } || {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t.right)) + BigIntAbs(k)
[[35m Debug  [0m] } == {
[[35m Debug  [0m]   val e: BigInt = BigInt("1")
[[35m Debug  [0m]   (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m] } && {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t.right)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] } < {
[[35m Debug  [0m]   val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   BigInt("1")
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @236:45:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 113 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:38...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || {
[[35m Debug  [0m]   val $4$: (Tree, Boolean, Tree) = splitAVL(t.right, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = (joinAVL(t.left, t.key, $4$._1), $4$._2, $4$._3)
[[35m Debug  [0m]   {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:38:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 114 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:50...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || {
[[35m Debug  [0m]   val $4$: (Tree, Boolean, Tree) = splitAVL(t.right, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = (joinAVL(t.left, t.key, $4$._1), $4$._2, $4$._3)
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:50:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 115 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:62...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || {
[[35m Debug  [0m]   val $4$: (Tree, Boolean, Tree) = splitAVL(t.right, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = (joinAVL(t.left, t.key, $4$._1), $4$._2, $4$._3)
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:62:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 116 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:85...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || {
[[35m Debug  [0m]   val $4$: (Tree, Boolean, Tree) = splitAVL(t.right, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = (joinAVL(t.left, t.key, $4$._1), $4$._2, $4$._3)
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:85:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 117 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:108...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || {
[[35m Debug  [0m]   val $4$: (Tree, Boolean, Tree) = splitAVL(t.right, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = (joinAVL(t.left, t.key, $4$._1), $4$._2, $4$._3)
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:108:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 118 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:138...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || {
[[35m Debug  [0m]   val $4$: (Tree, Boolean, Tree) = splitAVL(t.right, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = (joinAVL(t.left, t.key, $4$._1), $4$._2, $4$._3)
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || !toSet(_$t1(k, t)).subsetOf(toSet(t)) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:138:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 119 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:170...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || {
[[35m Debug  [0m]   val $4$: (Tree, Boolean, Tree) = splitAVL(t.right, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = (joinAVL(t.left, t.key, $4$._1), $4$._2, $4$._3)
[[35m Debug  [0m]   !isAVL(_$t1(k, t)) || !isAVL(_$t2(k, t)) || !checkGreatest(_$t1(k, t), k) || !checkSmallest(_$t2(k, t), k) || !toSet(_$t1(k, t)).subsetOf(toSet(t)) || !toSet(_$t2(k, t)).subsetOf(toSet(t)) || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } || {
[[35m Debug  [0m]     val e: BigInt = BigInt("0")
[[35m Debug  [0m]     (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]   } == {
[[35m Debug  [0m]     val e: BigInt = BigInt("1")
[[35m Debug  [0m]     (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]   } && {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + BigIntAbs(k)) + TreePrimitiveSize(t)
[[35m Debug  [0m]     BigInt("0")
[[35m Debug  [0m]   } < {
[[35m Debug  [0m]     val e: BigInt = (BigInt("0") + TreePrimitiveSize(t)) + BigIntAbs(k)
[[35m Debug  [0m]     BigInt("1")
[[35m Debug  [0m]   }
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:170:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 120 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for splitAVL @237:21...
[[35m Debug  [0m] !isAVL(t) || t.isInstanceOf[Empty] || t.key == k || k < t.key || {
[[35m Debug  [0m]   val $4$: (Tree, Boolean, Tree) = splitAVL(t.right, k)
[[35m Debug  [0m]   val x$1: (Tree, Boolean, Tree) = (joinAVL(t.left, t.key, $4$._1), $4$._2, $4$._3)
[[35m Debug  [0m]   isAVL(_$t1(k, t)) && isAVL(_$t2(k, t)) && checkGreatest(_$t1(k, t), k) && checkSmallest(_$t2(k, t), k) && toSet(_$t1(k, t)).subsetOf(toSet(t)) && toSet(_$t2(k, t)).subsetOf(toSet(t)) && (!_$success(k, t) || toSet(t).contains(k))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for splitAVL @237:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 121 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for splitAVL @227:9...
[[35m Debug  [0m] !isAVL(t) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for splitAVL @227:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 122 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:38...
[[35m Debug  [0m] !isAVL(t) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:38:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 123 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:50...
[[35m Debug  [0m] !isAVL(t) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:50:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 124 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:62...
[[35m Debug  [0m] !isAVL(t) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:62:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 125 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:85...
[[35m Debug  [0m] !isAVL(t) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:85:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 126 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:108...
[[35m Debug  [0m] !isAVL(t) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:108:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 127 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:138...
[[35m Debug  [0m] !isAVL(t) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:138:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 128 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for splitAVL @241:170...
[[35m Debug  [0m] !isAVL(t) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for splitAVL @241:170:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 129 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for splitAVL @227:9...
[[35m Debug  [0m] !isAVL(t) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for splitAVL @227:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 130 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call joinRightAVL(tl, k, tr))' VC for joinAVL @217:13...
[[35m Debug  [0m] !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || size(tl) > BigInt("0") && isAVL(tl) && isAVL(tr) && checkGreatest(tl, k) && checkSmallest(tr, k) && height(tl) > height(tr) + BigInt("1")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call joinRightAVL(tl, k, tr))' VC for joinAVL @217:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 131 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call joinLeftAVL(tl, k, tr))' VC for joinAVL @219:13...
[[35m Debug  [0m] !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) > height(tr) + BigInt("1") || height(tr) <= height(tl) + BigInt("1") || size(tr) > BigInt("0") && isAVL(tl) && isAVL(tr) && checkGreatest(tl, k) && checkSmallest(tr, k) && height(tl) + BigInt("1") < height(tr)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call joinLeftAVL(tl, k, tr))' VC for joinAVL @219:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 132 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for joinAVL @217:13...
[[35m Debug  [0m] !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || {
[[35m Debug  [0m]   val res: Tree = joinRightAVL(tl, k, tr)
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(tl) + size(tr)) + BigInt("1") && toSet(tl).subsetOf(toSet(res)) && toSet(res).contains(k) && toSet(tr).subsetOf(toSet(res)) && toSet(tl) ++ toSet(tr) + k == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for joinAVL @217:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 133 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for joinAVL @219:13...
[[35m Debug  [0m] !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) > height(tr) + BigInt("1") || height(tr) <= height(tl) + BigInt("1") || {
[[35m Debug  [0m]   val res: Tree = joinLeftAVL(tl, k, tr)
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(tl) + size(tr)) + BigInt("1") && toSet(tl).subsetOf(toSet(res)) && toSet(res).contains(k) && toSet(tr).subsetOf(toSet(res)) && toSet(tl) ++ toSet(tr) + k == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for joinAVL @219:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 134 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for joinAVL @221:13...
[[35m Debug  [0m] !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) > height(tr) + BigInt("1") || height(tr) > height(tl) + BigInt("1") || {
[[35m Debug  [0m]   val res: Tree = Node(k, tl, tr)
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(tl) + size(tr)) + BigInt("1") && toSet(tl).subsetOf(toSet(res)) && toSet(res).contains(k) && toSet(tr).subsetOf(toSet(res)) && toSet(tl) ++ toSet(tr) + k == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for joinAVL @221:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 135 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call balanceLeft((scrut.key): @DropVCs , t...)' VC for joinLeftAVL @204:21...
[[35m Debug  [0m] size(tr) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) + BigInt("1") >= height(tr) || !tr.isInstanceOf[Node] || height(tr.left) > height(tl) + BigInt("1") || {
[[35m Debug  [0m]   val tprim: Tree = Node(k, tl, tr.left)
[[35m Debug  [0m]   checkGreatest(tprim, tr.key) && checkSmallest(tr.right, tr.key) && isAVL(tprim) && isAVL(tr.right) && (abs(height(tprim) - height(tr.right)) <= BigInt("1") || height(tprim) == height(tr.right) + BigInt("2"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call balanceLeft((scrut.key): @DropVCs , t...)' VC for joinLeftAVL @204:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 136 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call joinLeftAVL(tl, k, (scrut.left): @Dro...)' VC for joinLeftAVL @207:33...
[[35m Debug  [0m] size(tr) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) + BigInt("1") >= height(tr) || !tr.isInstanceOf[Node] || height(tr.left) <= height(tl) + BigInt("1") || size(tr.left) > BigInt("0") && isAVL(tl) && isAVL(tr.left) && checkGreatest(tl, k) && checkSmallest(tr.left, k) && height(tl) + BigInt("1") < height(tr.left)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call joinLeftAVL(tl, k, (scrut.left): @Dro...)' VC for joinLeftAVL @207:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 137 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call balanceLeft((scrut.key): @DropVCs , t...)' VC for joinLeftAVL @208:21...
[[35m Debug  [0m] size(tr) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) + BigInt("1") >= height(tr) || !tr.isInstanceOf[Node] || height(tr.left) <= height(tl) + BigInt("1") || {
[[35m Debug  [0m]   val tprim: Tree = joinLeftAVL(tl, k, tr.left)
[[35m Debug  [0m]   checkGreatest(tprim, tr.key) && checkSmallest(tr.right, tr.key) && isAVL(tprim) && isAVL(tr.right) && (abs(height(tprim) - height(tr.right)) <= BigInt("1") || height(tprim) == height(tr.right) + BigInt("2"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call balanceLeft((scrut.key): @DropVCs , t...)' VC for joinLeftAVL @208:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 138 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for joinLeftAVL @198:9...
[[35m Debug  [0m] size(tr) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) + BigInt("1") >= height(tr) || TreePrimitiveSize(tr) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for joinLeftAVL @198:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 139 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: Inner refinement lifting' VC for joinLeftAVL @203:30...
[[35m Debug  [0m] size(tr) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) + BigInt("1") >= height(tr) || !tr.isInstanceOf[Node] || height(tr.left) > height(tl) + BigInt("1") || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: Inner refinement lifting' VC for joinLeftAVL @203:30:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 140 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for joinLeftAVL @204:21...
[[35m Debug  [0m] size(tr) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) + BigInt("1") >= height(tr) || !tr.isInstanceOf[Node] || height(tr.left) > height(tl) + BigInt("1") || {
[[35m Debug  [0m]   val res: Tree = balanceLeft(tr.key, Node(k, tl, tr.left), tr.right)
[[35m Debug  [0m]   isAVL(res) && height(res) <= height(tr) + BigInt("1") && height(res) >= height(tr) && height(res) >= height(tl) + BigInt("1") && size(res) == (size(tl) + size(tr)) + BigInt("1") && toSet(tl).subsetOf(toSet(res)) && toSet(res).contains(k) && toSet(tr).subsetOf(toSet(res)) && toSet(tl) ++ toSet(tr) + k == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for joinLeftAVL @204:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 141 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for joinLeftAVL @207:33...
[[35m Debug  [0m] size(tr) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) + BigInt("1") >= height(tr) || !tr.isInstanceOf[Node] || height(tr.left) <= height(tl) + BigInt("1") || TreePrimitiveSize(tr.left) < TreePrimitiveSize(tr)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for joinLeftAVL @207:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 142 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for joinLeftAVL @208:21...
[[35m Debug  [0m] size(tr) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) + BigInt("1") >= height(tr) || !tr.isInstanceOf[Node] || height(tr.left) <= height(tl) + BigInt("1") || {
[[35m Debug  [0m]   val res: Tree = balanceLeft(tr.key, joinLeftAVL(tl, k, tr.left), tr.right)
[[35m Debug  [0m]   isAVL(res) && height(res) <= height(tr) + BigInt("1") && height(res) >= height(tr) && height(res) >= height(tl) + BigInt("1") && size(res) == (size(tl) + size(tr)) + BigInt("1") && toSet(tl).subsetOf(toSet(res)) && toSet(res).contains(k) && toSet(tr).subsetOf(toSet(res)) && toSet(tl) ++ toSet(tr) + k == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for joinLeftAVL @208:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 143 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for joinLeftAVL @200:9...
[[35m Debug  [0m] size(tr) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) + BigInt("1") >= height(tr) || tr.isInstanceOf[Node]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for joinLeftAVL @200:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 144 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for joinLeftAVL @200:9...
[[35m Debug  [0m] size(tr) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) + BigInt("1") >= height(tr) || tr.isInstanceOf[Node] || {
[[35m Debug  [0m]   val res: Tree = stainless.lang.error[Tree]("match exhaustiveness")
[[35m Debug  [0m]   isAVL(res) && height(res) <= height(tr) + BigInt("1") && height(res) >= height(tr) && height(res) >= height(tl) + BigInt("1") && size(res) == (size(tl) + size(tr)) + BigInt("1") && toSet(tl).subsetOf(toSet(res)) && toSet(res).contains(k) && toSet(tr).subsetOf(toSet(res)) && toSet(tl) ++ toSet(tr) + k == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for joinLeftAVL @200:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 145 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call BSTSpreadRight((scrut.key): @DropVCs ...)' VC for balanceLeft @60:39...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || !l.isInstanceOf[Node] || height(l.left) >= height(l.right) || !l.right.isInstanceOf[Node] || checkSmallest(l.right, l.key)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call BSTSpreadRight((scrut.key): @DropVCs ...)' VC for balanceLeft @60:39:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 146 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: Inner refinement lifting' VC for balanceLeft @55:39...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || !l.isInstanceOf[Node] || height(l.left) >= height(l.right) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: Inner refinement lifting' VC for balanceLeft @55:39:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 147 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: Inner refinement lifting' VC for balanceLeft @56:39...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || !l.isInstanceOf[Node] || height(l.left) >= height(l.right) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: Inner refinement lifting' VC for balanceLeft @56:39:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 148 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: Inlined precondition of check' VC for balanceLeft @60:33...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || !l.isInstanceOf[Node] || height(l.left) >= height(l.right) || !l.right.isInstanceOf[Node] || (BSTSpreadRight(l.key, l.right)): @ghost  @DropVCs 
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: Inlined precondition of check' VC for balanceLeft @60:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 149 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceLeft @62:33...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || !l.isInstanceOf[Node] || height(l.left) >= height(l.right) || !l.right.isInstanceOf[Node] || {
[[35m Debug  [0m]   val tmp: Unit = {
[[35m Debug  [0m]     assume((BSTSpreadRight(l.key, l.right)): @ghost  @DropVCs )
[[35m Debug  [0m]     ()
[[35m Debug  [0m]   }
[[35m Debug  [0m]   val res: Tree = Node(l.right.key, Node(l.key, l.left, l.right.left), Node(n, l.right.right, r))
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(l) + size(r)) + BigInt("1") && (height(res) == max(height(l), height(r)) + BigInt("1") || height(res) == max(height(l), height(r))) && toSet(l) ++ toSet(r) + n == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceLeft @62:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 150 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceLeft @64:45...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || !l.isInstanceOf[Node] || height(l.left) >= height(l.right) || l.right.isInstanceOf[Node] || {
[[35m Debug  [0m]   val res: Tree = Empty()
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(l) + size(r)) + BigInt("1") && (height(res) == max(height(l), height(r)) + BigInt("1") || height(res) == max(height(l), height(r))) && toSet(l) ++ toSet(r) + n == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceLeft @64:45:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 151 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for balanceLeft @52:25...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || !l.isInstanceOf[Node] || height(l.left) >= height(l.right) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for balanceLeft @52:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 152 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceLeft @52:25...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || !l.isInstanceOf[Node] || height(l.left) >= height(l.right) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceLeft @52:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 153 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: Inner refinement lifting' VC for balanceLeft @67:31...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || !l.isInstanceOf[Node] || height(l.left) < height(l.right) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: Inner refinement lifting' VC for balanceLeft @67:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 154 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceLeft @68:25...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || !l.isInstanceOf[Node] || height(l.left) < height(l.right) || {
[[35m Debug  [0m]   val res: Tree = Node(l.key, l.left, Node(n, l.right, r))
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(l) + size(r)) + BigInt("1") && (height(res) == max(height(l), height(r)) + BigInt("1") || height(res) == max(height(l), height(r))) && toSet(l) ++ toSet(r) + n == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceLeft @68:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 155 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceLeft @71:33...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || l.isInstanceOf[Node] || {
[[35m Debug  [0m]   val res: Tree = Empty()
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(l) + size(r)) + BigInt("1") && (height(res) == max(height(l), height(r)) + BigInt("1") || height(res) == max(height(l), height(r))) && toSet(l) ++ toSet(r) + n == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceLeft @71:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 156 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for balanceLeft @49:13...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for balanceLeft @49:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 157 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceLeft @49:13...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) != height(r) + BigInt("2") || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceLeft @49:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 158 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceLeft @74:13...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(l) != height(r) + BigInt("2") || height(l) == height(r) + BigInt("2") || {
[[35m Debug  [0m]   val res: Tree = Node(n, l, r)
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(l) + size(r)) + BigInt("1") && (height(res) == max(height(l), height(r)) + BigInt("1") || height(res) == max(height(l), height(r))) && toSet(l) ++ toSet(r) + n == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceLeft @74:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 159 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for BSTSpreadRight @30:45...
[[35m Debug  [0m] !checkSmallest(subtree, v) || !subtree.isInstanceOf[Node] || v < subtree.key && checkSmallest(subtree.left, v) && checkSmallest(subtree.right, v)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for BSTSpreadRight @30:45:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 160 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for BSTSpreadRight @31:29...
[[35m Debug  [0m] !checkSmallest(subtree, v) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for BSTSpreadRight @31:29:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 161 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for BSTSpreadRight @29:9...
[[35m Debug  [0m] !checkSmallest(subtree, v) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for BSTSpreadRight @29:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 162 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for BSTSpreadRight @29:9...
[[35m Debug  [0m] !checkSmallest(subtree, v) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for BSTSpreadRight @29:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 163 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call balanceRight((scrut.key): @DropVCs , ...)' VC for joinRightAVL @188:21...
[[35m Debug  [0m] size(tl) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || !tl.isInstanceOf[Node] || height(tl.right) > height(tr) + BigInt("1") || {
[[35m Debug  [0m]   val tprim: Tree = Node(k, tl.right, tr)
[[35m Debug  [0m]   checkGreatest(tl.left, tl.key) && checkSmallest(tprim, tl.key) && isAVL(tl.left) && isAVL(tprim) && (abs(height(tl.left) - height(tprim)) <= BigInt("1") || height(tprim) == height(tl.left) + BigInt("2"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call balanceRight((scrut.key): @DropVCs , ...)' VC for joinRightAVL @188:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 164 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call joinRightAVL((scrut.right): @DropVCs ...)' VC for joinRightAVL @191:33...
[[35m Debug  [0m] size(tl) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || !tl.isInstanceOf[Node] || height(tl.right) <= height(tr) + BigInt("1") || size(tl.right) > BigInt("0") && isAVL(tl.right) && isAVL(tr) && checkGreatest(tl.right, k) && checkSmallest(tr, k) && height(tl.right) > height(tr) + BigInt("1")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call joinRightAVL((scrut.right): @DropVCs ...)' VC for joinRightAVL @191:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 165 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call balanceRight((scrut.key): @DropVCs , ...)' VC for joinRightAVL @192:21...
[[35m Debug  [0m] size(tl) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || !tl.isInstanceOf[Node] || height(tl.right) <= height(tr) + BigInt("1") || {
[[35m Debug  [0m]   val tprim: Tree = joinRightAVL(tl.right, k, tr)
[[35m Debug  [0m]   checkGreatest(tl.left, tl.key) && checkSmallest(tprim, tl.key) && isAVL(tl.left) && isAVL(tprim) && (abs(height(tl.left) - height(tprim)) <= BigInt("1") || height(tprim) == height(tl.left) + BigInt("2"))
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call balanceRight((scrut.key): @DropVCs , ...)' VC for joinRightAVL @192:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 166 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for joinRightAVL @182:9...
[[35m Debug  [0m] size(tl) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || TreePrimitiveSize(tl) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for joinRightAVL @182:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 167 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: Inner refinement lifting' VC for joinRightAVL @187:30...
[[35m Debug  [0m] size(tl) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || !tl.isInstanceOf[Node] || height(tl.right) > height(tr) + BigInt("1") || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: Inner refinement lifting' VC for joinRightAVL @187:30:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 168 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for joinRightAVL @188:21...
[[35m Debug  [0m] size(tl) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || !tl.isInstanceOf[Node] || height(tl.right) > height(tr) + BigInt("1") || {
[[35m Debug  [0m]   val res: Tree = balanceRight(tl.key, tl.left, Node(k, tl.right, tr))
[[35m Debug  [0m]   isAVL(res) && height(res) <= height(tl) + BigInt("1") && height(res) >= height(tl) && height(res) >= height(tr) + BigInt("1") && size(res) == (size(tl) + size(tr)) + BigInt("1") && toSet(tl) ++ toSet(tr) + k == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for joinRightAVL @188:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 169 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for joinRightAVL @191:33...
[[35m Debug  [0m] size(tl) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || !tl.isInstanceOf[Node] || height(tl.right) <= height(tr) + BigInt("1") || TreePrimitiveSize(tl.right) < TreePrimitiveSize(tl)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for joinRightAVL @191:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 170 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for joinRightAVL @192:21...
[[35m Debug  [0m] size(tl) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || !tl.isInstanceOf[Node] || height(tl.right) <= height(tr) + BigInt("1") || {
[[35m Debug  [0m]   val res: Tree = balanceRight(tl.key, tl.left, joinRightAVL(tl.right, k, tr))
[[35m Debug  [0m]   isAVL(res) && height(res) <= height(tl) + BigInt("1") && height(res) >= height(tl) && height(res) >= height(tr) + BigInt("1") && size(res) == (size(tl) + size(tr)) + BigInt("1") && toSet(tl) ++ toSet(tr) + k == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for joinRightAVL @192:21:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 171 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for joinRightAVL @184:9...
[[35m Debug  [0m] size(tl) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || tl.isInstanceOf[Node]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for joinRightAVL @184:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 172 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for joinRightAVL @184:9...
[[35m Debug  [0m] size(tl) <= BigInt("0") || !isAVL(tl) || !isAVL(tr) || !checkGreatest(tl, k) || !checkSmallest(tr, k) || height(tl) <= height(tr) + BigInt("1") || tl.isInstanceOf[Node] || {
[[35m Debug  [0m]   val res: Tree = stainless.lang.error[Tree]("match exhaustiveness")
[[35m Debug  [0m]   isAVL(res) && height(res) <= height(tl) + BigInt("1") && height(res) >= height(tl) && height(res) >= height(tr) + BigInt("1") && size(res) == (size(tl) + size(tr)) + BigInt("1") && toSet(tl) ++ toSet(tr) + k == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for joinRightAVL @184:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 173 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call BSTSpreadLeft((scrut.key): @DropVCs ,...)' VC for balanceRight @94:39...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || !r.isInstanceOf[Node] || height(r.left) <= height(r.right) || !r.left.isInstanceOf[Node] || checkGreatest(r.left, r.key)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call BSTSpreadLeft((scrut.key): @DropVCs ,...)' VC for balanceRight @94:39:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 174 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: Inner refinement lifting' VC for balanceRight @89:39...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || !r.isInstanceOf[Node] || height(r.left) <= height(r.right) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: Inner refinement lifting' VC for balanceRight @89:39:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 175 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: Inner refinement lifting' VC for balanceRight @90:39...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || !r.isInstanceOf[Node] || height(r.left) <= height(r.right) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: Inner refinement lifting' VC for balanceRight @90:39:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 176 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: Inlined precondition of check' VC for balanceRight @94:33...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || !r.isInstanceOf[Node] || height(r.left) <= height(r.right) || !r.left.isInstanceOf[Node] || (BSTSpreadLeft(r.key, r.left)): @ghost  @DropVCs 
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: Inlined precondition of check' VC for balanceRight @94:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 177 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceRight @96:33...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || !r.isInstanceOf[Node] || height(r.left) <= height(r.right) || !r.left.isInstanceOf[Node] || {
[[35m Debug  [0m]   val tmp: Unit = {
[[35m Debug  [0m]     assume((BSTSpreadLeft(r.key, r.left)): @ghost  @DropVCs )
[[35m Debug  [0m]     ()
[[35m Debug  [0m]   }
[[35m Debug  [0m]   val res: Tree = Node(r.left.key, Node(n, l, r.left.left), Node(r.key, r.left.right, r.right))
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(l) + size(r)) + BigInt("1") && (height(res) == max(height(l), height(r)) + BigInt("1") || height(res) == max(height(l), height(r))) && toSet(l) ++ toSet(r) + n == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceRight @96:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 178 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceRight @98:45...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || !r.isInstanceOf[Node] || height(r.left) <= height(r.right) || r.left.isInstanceOf[Node] || {
[[35m Debug  [0m]   val res: Tree = Empty()
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(l) + size(r)) + BigInt("1") && (height(res) == max(height(l), height(r)) + BigInt("1") || height(res) == max(height(l), height(r))) && toSet(l) ++ toSet(r) + n == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceRight @98:45:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 179 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for balanceRight @87:25...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || !r.isInstanceOf[Node] || height(r.left) <= height(r.right) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for balanceRight @87:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 180 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceRight @87:25...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || !r.isInstanceOf[Node] || height(r.left) <= height(r.right) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceRight @87:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 181 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: Inner refinement lifting' VC for balanceRight @101:31...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || !r.isInstanceOf[Node] || height(r.left) > height(r.right) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: Inner refinement lifting' VC for balanceRight @101:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 182 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceRight @102:25...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || !r.isInstanceOf[Node] || height(r.left) > height(r.right) || {
[[35m Debug  [0m]   val res: Tree = Node(r.key, Node(n, l, r.left), r.right)
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(l) + size(r)) + BigInt("1") && (height(res) == max(height(l), height(r)) + BigInt("1") || height(res) == max(height(l), height(r))) && toSet(l) ++ toSet(r) + n == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceRight @102:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 183 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceRight @105:33...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || r.isInstanceOf[Node] || {
[[35m Debug  [0m]   val res: Tree = Empty()
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(l) + size(r)) + BigInt("1") && (height(res) == max(height(l), height(r)) + BigInt("1") || height(res) == max(height(l), height(r))) && toSet(l) ++ toSet(r) + n == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceRight @105:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 184 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for balanceRight @84:13...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for balanceRight @84:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 185 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceRight @84:13...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) != height(l) + BigInt("2") || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceRight @84:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 186 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for balanceRight @108:13...
[[35m Debug  [0m] !checkGreatest(l, n) || !checkSmallest(r, n) || !isAVL(l) || !isAVL(r) || abs(height(l) - height(r)) > BigInt("1") && height(r) != height(l) + BigInt("2") || height(r) == height(l) + BigInt("2") || {
[[35m Debug  [0m]   val res: Tree = Node(n, l, r)
[[35m Debug  [0m]   isAVL(res) && size(res) == (size(l) + size(r)) + BigInt("1") && (height(res) == max(height(l), height(r)) + BigInt("1") || height(res) == max(height(l), height(r))) && toSet(l) ++ toSet(r) + n == toSet(res)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for balanceRight @108:13:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 187 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for BSTSpreadLeft @38:45...
[[35m Debug  [0m] !checkGreatest(subtree, v) || !subtree.isInstanceOf[Node] || v > subtree.key && checkGreatest(subtree.left, v) && checkGreatest(subtree.right, v)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for BSTSpreadLeft @38:45:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 188 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for BSTSpreadLeft @39:29...
[[35m Debug  [0m] !checkGreatest(subtree, v) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for BSTSpreadLeft @39:29:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 189 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for BSTSpreadLeft @37:9...
[[35m Debug  [0m] !checkGreatest(subtree, v) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for BSTSpreadLeft @37:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 190 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for BSTSpreadLeft @37:9...
[[35m Debug  [0m] !checkGreatest(subtree, v) || true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for BSTSpreadLeft @37:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 191 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for isAVL @58:9...
[[35m Debug  [0m] TreePrimitiveSize(thiss) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for isAVL @58:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 192 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for isAVL @59:25...
[[35m Debug  [0m] !thiss.isInstanceOf[Empty] || BigInt("0") <= TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for isAVL @59:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 193 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for isAVL @60:54...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || !isBalanced(thiss) || !isBST(thiss) || TreePrimitiveSize(thiss.right) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for isAVL @60:54:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 194 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for isAVL @60:65...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || !isBalanced(thiss) || !isBST(thiss) || !isAVL(thiss.right) || TreePrimitiveSize(thiss.left) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for isAVL @60:65:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 195 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for isAVL @60:31...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || {
[[35m Debug  [0m]   val arg: Boolean = isBalanced(thiss) && isBST(thiss) && isAVL(thiss.right) && isAVL(thiss.left)
[[35m Debug  [0m]   BigInt("0") <= TreePrimitiveSize(thiss)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for isAVL @60:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 196 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for isAVL @58:26...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for isAVL @58:26:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 197 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for isAVL @58:26...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for isAVL @58:26:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 198 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for isBalanced @46:19...
[[35m Debug  [0m] size(thiss) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for isBalanced @46:19:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 199 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for isBalanced @48:29...
[[35m Debug  [0m] !thiss.isInstanceOf[Empty] || BigInt("0") <= TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for isBalanced @48:29:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 200 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for isBalanced @49:117...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || height(thiss.left) - height(thiss.right) != BigInt("1") && height(thiss.right) - height(thiss.left) != BigInt("1") && height(thiss.right) != height(thiss.left) || size(thiss.left) < size(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for isBalanced @49:117:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 201 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for isBalanced @49:133...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || height(thiss.left) - height(thiss.right) != BigInt("1") && height(thiss.right) - height(thiss.left) != BigInt("1") && height(thiss.right) != height(thiss.left) || !isBalanced(thiss.left) || size(thiss.right) < size(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for isBalanced @49:133:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 202 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for isBalanced @49:35...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || {
[[35m Debug  [0m]   val arg: Boolean = (height(thiss.left) - height(thiss.right) == BigInt("1") || height(thiss.right) - height(thiss.left) == BigInt("1") || height(thiss.right) == height(thiss.left)) && isBalanced(thiss.left) && isBalanced(thiss.right)
[[35m Debug  [0m]   BigInt("0") <= TreePrimitiveSize(thiss)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for isBalanced @49:35:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 203 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for isBalanced @47:9...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for isBalanced @47:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 204 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for isBalanced @47:9...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for isBalanced @47:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 205 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for height @22:9...
[[35m Debug  [0m] TreePrimitiveSize(thiss) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for height @22:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 206 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for height @23:25...
[[35m Debug  [0m] !thiss.isInstanceOf[Empty] || BigInt("-1") > BigInt("-2")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for height @23:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 207 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for height @24:50...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || TreePrimitiveSize(thiss.left) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for height @24:50:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 208 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for height @24:61...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || {
[[35m Debug  [0m]   val i1: BigInt = height(thiss.left)
[[35m Debug  [0m]   TreePrimitiveSize(thiss.right) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for height @24:61:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 209 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for height @24:31...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || max(height(thiss.left), height(thiss.right)) + BigInt("1") > BigInt("-2")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for height @24:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 210 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for height @22:27...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for height @22:27:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 211 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for height @22:27...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for height @22:27:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 212 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for isBST @53:9...
[[35m Debug  [0m] TreePrimitiveSize(thiss) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for isBST @53:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 213 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for isBST @54:25...
[[35m Debug  [0m] !thiss.isInstanceOf[Empty] || BigInt("0") <= TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for isBST @54:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 214 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for isBST @55:75...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || !checkGreatest(thiss.left, thiss.key) || !checkSmallest(thiss.right, thiss.key) || TreePrimitiveSize(thiss.left) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for isBST @55:75:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 215 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for isBST @55:86...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || !checkGreatest(thiss.left, thiss.key) || !checkSmallest(thiss.right, thiss.key) || !isBST(thiss.left) || TreePrimitiveSize(thiss.right) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for isBST @55:86:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 216 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for isBST @55:31...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || {
[[35m Debug  [0m]   val arg: Boolean = checkGreatest(thiss.left, thiss.key) && checkSmallest(thiss.right, thiss.key) && isBST(thiss.left) && isBST(thiss.right)
[[35m Debug  [0m]   BigInt("0") <= TreePrimitiveSize(thiss)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for isBST @55:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 217 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for isBST @53:26...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for isBST @53:26:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 218 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for isBST @53:26...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for isBST @53:26:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 219 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for checkSmallest @41:9...
[[35m Debug  [0m] val arg: Boolean = ∀x: BigInt. (!toSet(thiss).contains(x) || x > v)
[[35m Debug  [0m] BigInt("0") <= TreePrimitiveSize(thiss) + BigIntAbs(v)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for checkSmallest @41:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 220 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for checkGreatest @37:9...
[[35m Debug  [0m] val arg: Boolean = ∀x: BigInt. (!toSet(thiss).contains(x) || x < v)
[[35m Debug  [0m] BigInt("0") <= TreePrimitiveSize(thiss) + BigIntAbs(v)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for checkGreatest @37:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 221 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call toSet(({   assert(thiss.isInstanceOf[...)' VC for toSet @79:9...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call toSet(({   assert(thiss.isInstanceOf[...)' VC for toSet @79:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 222 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call toSet(({   assert(thiss.isInstanceOf[...)' VC for toSet @?:?...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call toSet(({   assert(thiss.isInstanceOf[...)' VC for toSet @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 223 / 252
[[35m Debug  [0m]  - Now solving 'cast correctness' VC for toSet @27:39...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'cast correctness' VC for toSet @27:39:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 224 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call isEmpty(({   assert(thiss.isInstanceO...)' VC for isEmpty @65:9...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call isEmpty(({   assert(thiss.isInstanceO...)' VC for isEmpty @65:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 225 / 252
[[35m Debug  [0m]  - Now solving 'precond. (call isEmpty(({   assert(thiss.isInstanceO...)' VC for isEmpty @?:?...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'precond. (call isEmpty(({   assert(thiss.isInstanceO...)' VC for isEmpty @?:?:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 226 / 252
[[35m Debug  [0m]  - Now solving 'cast correctness' VC for isEmpty @25:37...
[[35m Debug  [0m] !thiss.isInstanceOf[AVLTree] || thiss.isInstanceOf[AVLTree]
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'cast correctness' VC for isEmpty @25:37:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 227 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for isEmpty @18:25...
[[35m Debug  [0m] !thiss.isInstanceOf[Empty] || true == (size(thiss) == BigInt("0"))
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for isEmpty @18:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 228 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for isEmpty @19:31...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || false == (size(thiss) == BigInt("0"))
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for isEmpty @19:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 229 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for isEmpty @17:34...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for isEmpty @17:34:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 230 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for isEmpty @17:34...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for isEmpty @17:34:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 231 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for size @12:14...
[[35m Debug  [0m] TreePrimitiveSize(thiss) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for size @12:14:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 232 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for size @13:25...
[[35m Debug  [0m] !thiss.isInstanceOf[Empty] || BigInt("0") == length[BigInt](toList(thiss))
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for size @13:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 233 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for size @14:31...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || TreePrimitiveSize(thiss.left) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for size @14:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 234 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for size @14:52...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || TreePrimitiveSize(thiss.right) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for size @14:52:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 235 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for size @14:31...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || (size(thiss.left) + BigInt("1")) + size(thiss.right) == length[BigInt](toList(thiss))
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for size @14:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 236 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for size @12:30...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for size @12:30:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 237 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for size @12:30...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for size @12:30:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 238 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for toList @32:9...
[[35m Debug  [0m] TreePrimitiveSize(thiss) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for toList @32:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 239 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for toList @33:25...
[[35m Debug  [0m] !thiss.isInstanceOf[Empty] || content[BigInt](empty[BigInt]) == toSet(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for toList @33:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 240 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for toList @34:31...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || TreePrimitiveSize(thiss.left) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for toList @34:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 241 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for toList @34:49...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || {
[[35m Debug  [0m]   val thiss: List[BigInt] = toList(thiss.left)
[[35m Debug  [0m]   TreePrimitiveSize(thiss.right) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for toList @34:49:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 242 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for toList @34:31...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || content[BigInt](++[BigInt](toList(thiss.left), ::[BigInt](toList(thiss.right), thiss.key))) == toSet(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for toList @34:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 243 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for toList @32:33...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for toList @32:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 244 / 252
[[35m Debug  [0m]  - Now solving 'postcondition' VC for toList @32:33...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'postcondition' VC for toList @32:33:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 245 / 252
[[35m Debug  [0m]  - Now solving 'non-negative measure' VC for toSet @27:9...
[[35m Debug  [0m] TreePrimitiveSize(thiss) >= BigInt("0")
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'non-negative measure' VC for toSet @27:9:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 246 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for toSet @28:25...
[[35m Debug  [0m] !thiss.isInstanceOf[Empty] || BigInt("0") <= TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for toSet @28:25:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 247 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for toSet @29:31...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || TreePrimitiveSize(thiss.left) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for toSet @29:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 248 / 252
[[35m Debug  [0m]  - Now solving 'measure decreases' VC for toSet @29:52...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || TreePrimitiveSize(thiss.right) < TreePrimitiveSize(thiss)
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'measure decreases' VC for toSet @29:52:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 249 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for toSet @29:31...
[[35m Debug  [0m] thiss.isInstanceOf[Empty] || {
[[35m Debug  [0m]   val arg: Set[BigInt] = toSet(thiss.left) ++ Set(thiss.key) ++ toSet(thiss.right)
[[35m Debug  [0m]   BigInt("0") <= TreePrimitiveSize(thiss)
[[35m Debug  [0m] }
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for toSet @29:31:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 250 / 252
[[35m Debug  [0m]  - Now solving 'body assertion: match exhaustiveness' VC for toSet @27:30...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'body assertion: match exhaustiveness' VC for toSet @27:30:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 251 / 252
[[35m Debug  [0m]  - Now solving 'type-checking' VC for toSet @27:30...
[[35m Debug  [0m] true
[[35m Debug  [0m] Solving with: U:smt-z3
[[35m Debug  [0m]  - Result for 'type-checking' VC for toSet @27:30:
[[35m Debug  [0m]  => VALID
[[34m  Info  [0m] Verified: 252 / 252
[[34m  Info  [0m]   ┌───────────────────┐
[[34m  Info  [0m] ╔═╡ [32mstainless summary[0m ╞══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
[[34m  Info  [0m] ║ └───────────────────┘                                                                                                                  ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:37:9: [0m     [32mBSTSpreadLeft[0m   [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:37:9: [0m     [32mBSTSpreadLeft[0m   [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:38:45: [0m    [32mBSTSpreadLeft[0m   [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:39:29: [0m    [32mBSTSpreadLeft[0m   [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:29:9: [0m     [32mBSTSpreadRight[0m  [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:29:9: [0m     [32mBSTSpreadRight[0m  [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:30:45: [0m    [32mBSTSpreadRight[0m  [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:31:29: [0m    [32mBSTSpreadRight[0m  [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32m_$success[0m       [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32m_$t1[0m            [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32m_$t2[0m            [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:49:13: [0m    [32mbalanceLeft[0m     [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:49:13: [0m    [32mbalanceLeft[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:52:25: [0m    [32mbalanceLeft[0m     [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:52:25: [0m    [32mbalanceLeft[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:55:39: [0m    [32mbalanceLeft[0m     [32mbody assertion: Inner refinement lifting[0m                  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:56:39: [0m    [32mbalanceLeft[0m     [32mbody assertion: Inner refinement lifting[0m                  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:60:33: [0m    [32mbalanceLeft[0m     [32mbody assertion: Inlined precondition of check[0m             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:60:39: [0m    [32mbalanceLeft[0m     [32mprecond. (call BSTSpreadRight((scrut.key): @DropVCs ...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:62:33: [0m    [32mbalanceLeft[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m4.6[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:64:45: [0m    [32mbalanceLeft[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:67:31: [0m    [32mbalanceLeft[0m     [32mbody assertion: Inner refinement lifting[0m                  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:68:25: [0m    [32mbalanceLeft[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m2.7[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:71:33: [0m    [32mbalanceLeft[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:74:13: [0m    [32mbalanceLeft[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.5[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:84:13: [0m    [32mbalanceRight[0m    [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:84:13: [0m    [32mbalanceRight[0m    [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:87:25: [0m    [32mbalanceRight[0m    [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:87:25: [0m    [32mbalanceRight[0m    [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:89:39: [0m    [32mbalanceRight[0m    [32mbody assertion: Inner refinement lifting[0m                  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:90:39: [0m    [32mbalanceRight[0m    [32mbody assertion: Inner refinement lifting[0m                  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:94:33: [0m    [32mbalanceRight[0m    [32mbody assertion: Inlined precondition of check[0m             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:94:39: [0m    [32mbalanceRight[0m    [32mprecond. (call BSTSpreadLeft((scrut.key): @DropVCs ,...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:96:33: [0m    [32mbalanceRight[0m    [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m6.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:98:45: [0m    [32mbalanceRight[0m    [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:101:31: [0m   [32mbalanceRight[0m    [32mbody assertion: Inner refinement lifting[0m                  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:102:25: [0m   [32mbalanceRight[0m    [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m3.4[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:105:33: [0m   [32mbalanceRight[0m    [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:108:13: [0m   [32mbalanceRight[0m    [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.7[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:37:9: [0m                  [32mcheckGreatest[0m   [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:41:9: [0m                  [32mcheckSmallest[0m   [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32mdelete[0m          [32mprecond. (call delete(({   assert(thiss.isInstanceOf...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLOperations.scala:38:9: [0m         [32mdelete[0m          [32mprecond. (call delete(({   assert(thiss.isInstanceOf...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:14:50: [0m                  [32mdelete[0m          [32mprecond. (call deleteAVL({   assert(thiss.isInstance...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:14:60: [0m                  [32mdelete[0m          [32mcast correctness[0m                                          [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:164:9: [0m    [32mdeleteAVL[0m       [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:166:9: [0m    [32mdeleteAVL[0m       [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:166:9: [0m    [32mdeleteAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:167:29: [0m   [32mdeleteAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:170:21: [0m   [32mdeleteAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m1.4[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:170:21: [0m   [32mdeleteAVL[0m       [32mprecond. (call delete_root(tree))[0m                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.4[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:172:34: [0m   [32mdeleteAVL[0m       [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:172:34: [0m   [32mdeleteAVL[0m       [32mprecond. (call deleteAVL((scrut.left): @DropVCs , key))[0m   [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:173:21: [0m   [32mdeleteAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:173:21: [0m   [32mdeleteAVL[0m       [32mprecond. (call balanceRight((scrut.key): @DropVCs , ...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m3.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:175:34: [0m   [32mdeleteAVL[0m       [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:175:34: [0m   [32mdeleteAVL[0m       [32mprecond. (call deleteAVL((scrut.right): @DropVCs , key))[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:176:21: [0m   [32mdeleteAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m1.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:176:21: [0m   [32mdeleteAVL[0m       [32mprecond. (call balanceLeft((scrut.key): @DropVCs , (...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m4.5[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:139:9: [0m    [32mdelete_max[0m      [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:141:9: [0m    [32mdelete_max[0m      [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:141:9: [0m    [32mdelete_max[0m      [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:143:17: [0m   [32mdelete_max[0m      [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.8[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:146:40: [0m   [32mdelete_max[0m      [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:146:40: [0m   [32mdelete_max[0m      [32mprecond. (call delete_max((scrut.right): @DropVCs ))[0m      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:147:17: [0m   [32mdelete_max[0m      [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:147:26: [0m   [32mdelete_max[0m      [32mprecond. (call balanceLeft((scrut.key): @DropVCs , (...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.9[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:154:9: [0m    [32mdelete_root[0m     [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:154:9: [0m    [32mdelete_root[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:155:50: [0m   [32mdelete_root[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m1.3[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:156:50: [0m   [32mdelete_root[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m2.6[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:158:40: [0m   [32mdelete_root[0m     [32mprecond. (call delete_max((scrut.left): @DropVCs ))[0m       [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:159:17: [0m   [32mdelete_root[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.5[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:159:17: [0m   [32mdelete_root[0m     [32mprecond. (call balanceRight(n_prim, l_prim, (scrut.r...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.6[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:22:9: [0m                  [32mheight[0m          [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:22:27: [0m                 [32mheight[0m          [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:22:27: [0m                 [32mheight[0m          [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:23:25: [0m                 [32mheight[0m          [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:24:31: [0m                 [32mheight[0m          [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:24:50: [0m                 [32mheight[0m          [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:24:61: [0m                 [32mheight[0m          [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32minsert[0m          [32mprecond. (call insert(({   assert(thiss.isInstanceOf...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLOperations.scala:30:9: [0m         [32minsert[0m          [32mprecond. (call insert(({   assert(thiss.isInstanceOf...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:13:50: [0m                  [32minsert[0m          [32mprecond. (call insertAVL({   assert(thiss.isInstance...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:13:60: [0m                  [32minsert[0m          [32mcast correctness[0m                                          [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:113:9: [0m    [32minsertAVL[0m       [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:115:9: [0m    [32minsertAVL[0m       [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:115:9: [0m    [32minsertAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:116:29: [0m   [32minsertAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:121:30: [0m   [32minsertAVL[0m       [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:121:30: [0m   [32minsertAVL[0m       [32mprecond. (call insertAVL((scrut.left): @DropVCs , ne...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:125:25: [0m   [32minsertAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:125:25: [0m   [32minsertAVL[0m       [32mprecond. (call balanceLeft((scrut.key): @DropVCs , l...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:128:30: [0m   [32minsertAVL[0m       [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:128:30: [0m   [32minsertAVL[0m       [32mprecond. (call insertAVL((scrut.right): @DropVCs , n...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:132:25: [0m   [32minsertAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:132:25: [0m   [32minsertAVL[0m       [32mprecond. (call balanceRight((scrut.key): @DropVCs , ...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:137:127: [0m  [32minsertAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:137:127: [0m  [32minsertAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:137:127: [0m  [32minsertAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:10:13: [0m                  [32minv[0m             [32mcast correctness[0m                                          [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:10:13: [0m                  [32minv[0m             [32mprecond. (call inv(({   assert(thiss.isInstanceOf[AV...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:58:9: [0m                  [32misAVL[0m           [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:58:26: [0m                 [32misAVL[0m           [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:58:26: [0m                 [32misAVL[0m           [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:59:25: [0m                 [32misAVL[0m           [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:60:31: [0m                 [32misAVL[0m           [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:60:54: [0m                 [32misAVL[0m           [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:60:65: [0m                 [32misAVL[0m           [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:53:9: [0m                  [32misBST[0m           [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:53:26: [0m                 [32misBST[0m           [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:53:26: [0m                 [32misBST[0m           [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:54:25: [0m                 [32misBST[0m           [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:55:31: [0m                 [32misBST[0m           [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:55:75: [0m                 [32misBST[0m           [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:55:86: [0m                 [32misBST[0m           [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:46:19: [0m                 [32misBalanced[0m      [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:47:9: [0m                  [32misBalanced[0m      [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:47:9: [0m                  [32misBalanced[0m      [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:48:29: [0m                 [32misBalanced[0m      [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:49:35: [0m                 [32misBalanced[0m      [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:49:117: [0m                [32misBalanced[0m      [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:49:133: [0m                [32misBalanced[0m      [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32misEmpty[0m         [32mprecond. (call isEmpty(({   assert(thiss.isInstanceO...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLOperations.scala:65:9: [0m         [32misEmpty[0m         [32mprecond. (call isEmpty(({   assert(thiss.isInstanceO...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:25:37: [0m                  [32misEmpty[0m         [32mcast correctness[0m                                          [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:17:34: [0m                 [32misEmpty[0m         [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:17:34: [0m                 [32misEmpty[0m         [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:18:25: [0m                 [32misEmpty[0m         [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:19:31: [0m                 [32misEmpty[0m         [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32mjoin[0m            [32mprecond. (call join(({   assert(thiss.isInstanceOf[A...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLOperations.scala:58:9: [0m         [32mjoin[0m            [32mprecond. (call join(({   assert(thiss.isInstanceOf[A...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:19:13: [0m                  [32mjoin[0m            [32mprecond. (call joinAVL(tl, k, tr))[0m                        [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:217:13: [0m   [32mjoinAVL[0m         [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:217:13: [0m   [32mjoinAVL[0m         [32mprecond. (call joinRightAVL(tl, k, tr))[0m                   [32mvalid[0m  [32mU:smt-z3[0m  [32m1.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:219:13: [0m   [32mjoinAVL[0m         [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:219:13: [0m   [32mjoinAVL[0m         [32mprecond. (call joinLeftAVL(tl, k, tr))[0m                    [32mvalid[0m  [32mU:smt-z3[0m  [32m1.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:221:13: [0m   [32mjoinAVL[0m         [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.5[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:198:9: [0m    [32mjoinLeftAVL[0m     [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:200:9: [0m    [32mjoinLeftAVL[0m     [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:200:9: [0m    [32mjoinLeftAVL[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:203:30: [0m   [32mjoinLeftAVL[0m     [32mbody assertion: Inner refinement lifting[0m                  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:204:21: [0m   [32mjoinLeftAVL[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.9[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:204:21: [0m   [32mjoinLeftAVL[0m     [32mprecond. (call balanceLeft((scrut.key): @DropVCs , t...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m1.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:207:33: [0m   [32mjoinLeftAVL[0m     [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:207:33: [0m   [32mjoinLeftAVL[0m     [32mprecond. (call joinLeftAVL(tl, k, (scrut.left): @Dro...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m2.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:208:21: [0m   [32mjoinLeftAVL[0m     [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:208:21: [0m   [32mjoinLeftAVL[0m     [32mprecond. (call balanceLeft((scrut.key): @DropVCs , t...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:182:9: [0m    [32mjoinRightAVL[0m    [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:184:9: [0m    [32mjoinRightAVL[0m    [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:184:9: [0m    [32mjoinRightAVL[0m    [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:187:30: [0m   [32mjoinRightAVL[0m    [32mbody assertion: Inner refinement lifting[0m                  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:188:21: [0m   [32mjoinRightAVL[0m    [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m1.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:188:21: [0m   [32mjoinRightAVL[0m    [32mprecond. (call balanceRight((scrut.key): @DropVCs , ...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m1.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:191:33: [0m   [32mjoinRightAVL[0m    [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:191:33: [0m   [32mjoinRightAVL[0m    [32mprecond. (call joinRightAVL((scrut.right): @DropVCs ...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m2.4[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:192:21: [0m   [32mjoinRightAVL[0m    [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.4[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:192:21: [0m   [32mjoinRightAVL[0m    [32mprecond. (call balanceRight((scrut.key): @DropVCs , ...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32mlookup[0m          [32mprecond. (call lookup(({   assert(thiss.isInstanceOf...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLOperations.scala:22:9: [0m         [32mlookup[0m          [32mprecond. (call lookup(({   assert(thiss.isInstanceOf...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:12:53: [0m                  [32mlookup[0m          [32mprecond. (call lookupAVL({   assert(thiss.isInstance...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:12:63: [0m                  [32mlookup[0m          [32mcast correctness[0m                                          [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:12:9: [0m     [32mlookupAVL[0m       [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:14:9: [0m     [32mlookupAVL[0m       [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:14:9: [0m     [32mlookupAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:15:29: [0m    [32mlookupAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:18:17: [0m    [32mlookupAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:20:17: [0m    [32mlookupAVL[0m       [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:20:17: [0m    [32mlookupAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.7[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:20:17: [0m    [32mlookupAVL[0m       [32mprecond. (call lookupAVL((scrut.left): @DropVCs , se...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:22:17: [0m    [32mlookupAVL[0m       [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:22:17: [0m    [32mlookupAVL[0m       [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.4[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:22:17: [0m    [32mlookupAVL[0m       [32mprecond. (call lookupAVL((scrut.right): @DropVCs , s...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32msize[0m            [32mprecond. (call size(({   assert(thiss.isInstanceOf[A...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLOperations.scala:72:9: [0m         [32msize[0m            [32mprecond. (call size(({   assert(thiss.isInstanceOf[A...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:26:33: [0m                  [32msize[0m            [32mcast correctness[0m                                          [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:12:14: [0m                 [32msize[0m            [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:12:30: [0m                 [32msize[0m            [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:12:30: [0m                 [32msize[0m            [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:13:25: [0m                 [32msize[0m            [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:14:31: [0m                 [32msize[0m            [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:14:31: [0m                 [32msize[0m            [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:14:52: [0m                 [32msize[0m            [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32msplit[0m           [32mprecond. (call split(({   assert(thiss.isInstanceOf[...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLOperations.scala:48:9: [0m         [32msplit[0m           [32mprecond. (call split(({   assert(thiss.isInstanceOf[...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:16:66: [0m                  [32msplit[0m           [32mprecond. (call splitAVL({   assert(thiss.isInstanceO...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:16:75: [0m                  [32msplit[0m           [32mcast correctness[0m                                          [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:225:9: [0m    [32msplitAVL[0m        [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:227:9: [0m    [32msplitAVL[0m        [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:227:9: [0m    [32msplitAVL[0m        [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:228:29: [0m   [32msplitAVL[0m        [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:231:21: [0m   [32msplitAVL[0m        [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.3[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:233:45: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:233:45: [0m   [32msplitAVL[0m        [32mprecond. (call splitAVL((scrut.left): @DropVCs , k))[0m      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:234:21: [0m   [32msplitAVL[0m        [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.5[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:234:32: [0m   [32msplitAVL[0m        [32mprecond. (call joinAVL(rprim, (scrut.key): @DropVCs ...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m1.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:236:45: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:236:45: [0m   [32msplitAVL[0m        [32mprecond. (call splitAVL((scrut.right): @DropVCs , k))[0m     [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:237:21: [0m   [32msplitAVL[0m        [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.5[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:237:22: [0m   [32msplitAVL[0m        [32mprecond. (call joinAVL((scrut.left): @DropVCs , (scr...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m1.2[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:38: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:38: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:38: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:38: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:38: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:50: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:50: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:50: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:50: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:50: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:62: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:62: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:62: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:62: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:62: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:85: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:85: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:85: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:85: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:85: [0m   [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:108: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:108: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:108: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:108: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:108: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:138: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:138: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:138: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:138: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:138: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:170: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:170: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:170: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:170: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLImplementation.scala:241:170: [0m  [32msplitAVL[0m        [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:32:9: [0m                  [32mtoList[0m          [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:32:33: [0m                 [32mtoList[0m          [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:32:33: [0m                 [32mtoList[0m          [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:33:25: [0m                 [32mtoList[0m          [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:34:31: [0m                 [32mtoList[0m          [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:34:31: [0m                 [32mtoList[0m          [32mpostcondition[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:34:49: [0m                 [32mtoList[0m          [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.1[0m ║
[[34m  Info  [0m] ║ [32m[0m                                        [32mtoSet[0m           [32mprecond. (call toSet(({   assert(thiss.isInstanceOf[...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVLOperations.scala:79:9: [0m         [32mtoSet[0m           [32mprecond. (call toSet(({   assert(thiss.isInstanceOf[...)[0m  [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/AVL.scala:27:39: [0m                  [32mtoSet[0m           [32mcast correctness[0m                                          [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:27:9: [0m                  [32mtoSet[0m           [32mnon-negative measure[0m                                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:27:30: [0m                 [32mtoSet[0m           [32mbody assertion: match exhaustiveness[0m                      [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:27:30: [0m                 [32mtoSet[0m           [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:28:25: [0m                 [32mtoSet[0m           [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:29:31: [0m                 [32mtoSet[0m           [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:29:31: [0m                 [32mtoSet[0m           [32mtype-checking[0m                                             [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ║ [32mcode/Tree.scala:29:52: [0m                 [32mtoSet[0m           [32mmeasure decreases[0m                                         [32mvalid[0m  [32mU:smt-z3[0m  [32m0.0[0m ║
[[34m  Info  [0m] ╟┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄╢
[[34m  Info  [0m] ║ [32mtotal: 252  valid: 252  (0 from cache) invalid: 0    unknown: 0    time:    64.8[0m                                                       ║
[[34m  Info  [0m] ╚════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
[[34m  Info  [0m] Shutting down executor service.
